#!/bin/bash
# SNP_extract 1.0.2
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

   
    echo "Value of SNP_list: $SNP_list"
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

#Retrieve file name
file_name=$(dx describe "$SNP_list" --name)

# Detect file extension
extension="${file_name##*.}"

# Detect base name
basename="${file_name%.*}"

    dx download "$SNP_list" -o "$file_name"


 
# Define modified input file name
SNP_list_formatted="${basename}_converted.txt"



# Convert all formats to tab-separated TXT
case "$extension" in
  csv)
    awk -F',' 'BEGIN {OFS="\t"} NF {for (i=1; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : OFS)}' "$file_name" > "$SNP_list_formatted"
    echo "CSV converted to tab-separated TXT: $SNP_list_formatted"
    ;;
  tsv)
    awk -F'\t' 'BEGIN {OFS="\t"} NF {for (i=1; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : OFS)}' "$file_name" > "$SNP_list_formatted"
    echo "TSV cleaned and saved as tab-separated TXT: $SNP_list_formatted"
    ;;
  txt)
    if grep -q ',' "$file_name"; then
      awk -F',' 'BEGIN {OFS="\t"} NF {for (i=1; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : OFS)}' "$file_name" > "$SNP_list_formatted"
      echo "Comma-separated TXT converted to tab-separated TXT: $SNP_list_formatted"
    elif grep -q $'\t' "$file_name"; then
      awk -F'\t' 'BEGIN {OFS="\t"} NF {for (i=1; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : OFS)}' "$file_name" > "$SNP_list_formatted"
      echo "Tab-separated TXT cleaned as tab-separated TXT: $SNP_list_formatted"
    else
      awk 'BEGIN {OFS="\t"} NF {for (i=1; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : OFS)}' "$file_name" > "$SNP_list_formatted"
      echo "Space-separated TXT converted to tab-separated TXT: $SNP_list_formatted"
    fi
    ;;
  *)
    dx-jobutil-report-error "Unsupported file format: $extension"
    exit 1
    ;;
esac


## Remove trailing spaces
sed -i 's/^[[:space:]]*//;s/[[:space:]]*$//' "$SNP_list_formatted"


    # Fill in your application code here.
field_id="22418" # Genotypic data
    echo "Value of field_id: $field_id"


 ### input file check
# Check if all lines in input file match the SNP format
if awk '!/^rs[0-9]+$/ {exit 1}' $SNP_list_formatted && [ "$field_id" = 22418 ]; then
    input_type="SNP"
# Check if all lines match the genomic region expected format (4 columns: chr, start, end, ID)
elif awk '{if (NF != 4 || $1 !~ /^[0-9XY]+$/ || $2 !~ /^[0-9]+$/ || $3 !~ /^[0-9]+$/) exit 1}' $SNP_list_formatted; then
    input_type="genomic_regions"
else
    dx-jobutil-report-error "Unexpected input format.
    Ensure the SNPs list includes SNP IDs starting with 'rs' or lists genomic positions in four columns: chromosome (e.g., 1, 15, X), region start (in base pair coordinates), region end (in base pair coordinates), and a user-selected identifier for the region. 
    Each chromosome region should be on a separate line."
fi

# Get a list of bed files given the field id provided  

dx find data --property field_id=$field_id --path "$DX_PROJECT_CONTEXT_ID" | \
awk -F'/Bulk' '{split($2, a, " \\(file"); print "/Bulk"a[1]}' |
grep -E '\.(bed)' | \
awk -F'.' '{print $1}' | \
sort | uniq > all_snp_files_${field_id}.txt


  #### This section checks if user has access to the genetic data
 line_number=$(wc -l all_snp_files_${field_id}.txt |awk '{print $1}')

 if [ $line_number -eq 0 ]; 
  then
     dx-jobutil-report-error "The field id you provided does not correspond to PLINK (bed) files or you don't have access to genetic data."   
 fi



 ## some useful diagnostic output for log file
 #### if there are issues, can check if all genetic files are found and whether input type is identified correctly

echo "Input type: $input_type"
echo "Identified Plink files associated with field id $field_id"
cat all_snp_files_${field_id}.txt

# Download snps file to retrive SNPs information
dx download "$DX_PROJECT_CONTEXT_ID:/Showcase metadata/snps.tsv"

# Plink commands - based on input type  
 
 if [[ $input_type = "SNP" ]]; then 
 
    # Make list in unix format
    awk '{ sub("\r$", ""); print }' $SNP_list_formatted > snps_list_unix.txt
    # remove rs prefix to be able to look up in the column in the snps file
    awk '{ print substr($0, 3) }' snps_list_unix.txt > snps_list_find.txt
    
    #get list of chromosomes where snps are at
    awk -F '\t' 'NR==FNR{patterns[$0]; next} $2 in patterns' snps_list_find.txt snps.tsv | awk -F '\t' '{print $3}' | sort -u > chrom_list.txt
    
    # write into UKB file format
    sed -i -e "s/^/ukb${field_id}_c/" -e 's/$/_/' chrom_list.txt
    
    # select the relevant files (chromosome selected) from the complete list
    grep -f chrom_list.txt all_snp_files_"${field_id}".txt > files_to_merge.txt
    
    # loop into all the file names and download
    filename='files_to_merge.txt'
       while read p; do 
        dx download "$DX_PROJECT_CONTEXT_ID:${p}*"
       done < "$filename"  
     
   awk -F'/' '{print $NF}' $filename > chrom_file_name.txt

   echo "Plink files variants are extracted from:"
    cat chrom_file_name.txt
   
   plink1.9 --merge-list chrom_file_name.txt --make-bed --out genotyping_merged
   plink1.9 --bfile genotyping_merged --extract snps_list_unix.txt --recode A --out plink_results

 else 
 
     # Make list in unix format
    awk '{ sub("\r$", ""); print }' $SNP_list_formatted > snps_list_unix.txt  
    # Extract Chromosome number 
    awk -F " " '{print $1}' snps_list_unix.txt   > chrom_list.txt 
    
    # write into UKB format
    sed -i -e "s/^/ukb${field_id}_c/" -e 's/$/_/' chrom_list.txt
    
    # select the relevant files (chromosome selected) from the complete list
    grep -f chrom_list.txt all_snp_files_"${field_id}".txt > files_to_merge.txt

  # loop into all the file names and download
    filename='files_to_merge.txt'
       while read p; do 
        dx download "$DX_PROJECT_CONTEXT_ID:${p}*"
       done < "$filename"  
     
   awk -F'/' '{print $NF}' $filename > chrom_file_name.txt  
  
    plink1.9 --merge-list chrom_file_name.txt --make-bed --out genotyping_merged
    plink1.9 --bfile genotyping_merged --extract range snps_list_unix.txt  --recode A --out plink_results

 fi

  ##### only retain lines with positive eids (i.e. non-withdrawn participants)
  awk '$1 > 0  {print ;}' plink_results.raw > ${basename}_SNP_results_${field_id}.raw

    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

#Define output file name as [basename of input file]_SNP_results.raw
    extracted_snps_id=$(dx upload ${basename}_SNP_results_${field_id}.raw --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output extracted_snps "$extracted_snps_id" --class=file
}